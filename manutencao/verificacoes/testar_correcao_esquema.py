#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste para verificar se a corre√ß√£o autom√°tica do esquema funciona
"""

import os
import sys

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def testar_correcao_esquema():
    """Testa se a corre√ß√£o autom√°tica de esquema funciona"""
    try:
        print("TESTE DE CORRE√á√ÉO AUTOM√ÅTICA DO ESQUEMA")
        print("=" * 50)
        
        from database.database import Database
        
        # Criar inst√¢ncia do banco
        db = Database()
        
        # Verificar se a fun√ß√£o existe
        if hasattr(db, 'verificar_e_corrigir_esquema_pos_restauracao'):
            print("‚úÖ Fun√ß√£o verificar_e_corrigir_esquema_pos_restauracao encontrada")
            
            # Testar se as colunas cr√≠ticas existem
            cursor = db.conn.cursor()
            colunas = cursor.execute("PRAGMA table_info(vendas)").fetchall()
            
            # Verificar coluna 'total'
            tem_total = any(col[1] == 'total' for col in colunas)
            if tem_total:
                print("‚úÖ Coluna 'total' confirmada na tabela vendas")
            else:
                print("‚ùå Coluna 'total' n√£o encontrada - isso ser√° corrigido automaticamente")
            
            # Verificar coluna 'status'
            tem_status = any(col[1] == 'status' for col in colunas)
            if tem_status:
                print("‚úÖ Coluna 'status' confirmada na tabela vendas")
            else:
                print("‚ùå Coluna 'status' n√£o encontrada - isso ser√° corrigido automaticamente")
            
            # Testar a fun√ß√£o de corre√ß√£o
            print("\nExecutando verifica√ß√£o de esquema...")
            resultado = db.verificar_e_corrigir_esquema_pos_restauracao()
            
            if resultado:
                print("‚úÖ Verifica√ß√£o de esquema executada com sucesso")
                
                # Verificar novamente ap√≥s a corre√ß√£o
                colunas_apos = cursor.execute("PRAGMA table_info(vendas)").fetchall()
                tem_total_apos = any(col[1] == 'total' for col in colunas_apos)
                tem_status_apos = any(col[1] == 'status' for col in colunas_apos)
                
                if tem_total_apos and tem_status_apos:
                    print("‚úÖ Todas as colunas cr√≠ticas est√£o presentes ap√≥s verifica√ß√£o")
                    
                    # Testar uma consulta que usa a coluna 'total'
                    try:
                        resultado_consulta = db.fetchone("SELECT COUNT(*) as count FROM vendas WHERE total >= 0")
                        if resultado_consulta:
                            print(f"‚úÖ Consulta usando coluna 'total' executada com sucesso: {resultado_consulta['count']} registros")
                        else:
                            print("‚úÖ Consulta executada (sem registros)")
                    except Exception as e:
                        print(f"‚ùå Erro ao executar consulta com coluna 'total': {e}")
                        return False
                    
                    print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
                    print("O sistema agora deve funcionar corretamente mesmo com backups antigos.")
                    return True
                else:
                    print("‚ùå Algumas colunas ainda est√£o faltando ap√≥s corre√ß√£o")
                    return False
            else:
                print("‚ùå Falha na verifica√ß√£o de esquema")
                return False
        else:
            print("‚ùå Fun√ß√£o verificar_e_corrigir_esquema_pos_restauracao n√£o encontrada")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    sucesso = testar_correcao_esquema()
    if sucesso:
        print("\n‚úÖ CORRE√á√ÉO IMPLEMENTADA COM SUCESSO!")
        print("Agora, sempre que um backup for restaurado, o esquema ser√° automaticamente verificado e corrigido.")
        print("O erro 'no such column: total' n√£o deve mais ocorrer.")
    else:
        print("\n‚ùå TESTE FALHOU - Verifique os logs acima para mais detalhes.")
