#!/usr/bin/env python3
"""
Script para verificar problemas espec√≠ficos com a UI do dashboard
"""
import sys
import os
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def verificar_problemas_ui():
    """Verifica poss√≠veis problemas com a UI do dashboard"""
    print("=== VERIFICA√á√ÉO DE PROBLEMAS UI DO DASHBOARD ===\n")
    
    try:
        from database.database import Database
        from views.dashboard_view import DashboardView
        import flet as ft
        
        print("1. Testando cria√ß√£o do banco de dados...")
        db = Database()
        print("   ‚úÖ Banco de dados criado com sucesso")
        
        print("\n2. Testando cria√ß√£o de p√°gina mock...")
        # Criar uma p√°gina mock para teste
        page_mock = type('MockPage', (), {
            'bgcolor': ft.colors.BLUE_50,
            'data': {'language': 'pt'},
            'update': lambda: print("   ‚úÖ page.update() chamado")
        })()
        print("   ‚úÖ P√°gina mock criada")
        
        print("\n3. Testando cria√ß√£o do dashboard...")
        usuario_mock = {'nome': 'Teste', 'is_admin': True}
        dashboard = DashboardView(page_mock, usuario_mock)
        print("   ‚úÖ Dashboard criado")
        
        print("\n4. Verificando valores iniciais...")
        print(f"   - Vendas m√™s: {dashboard.vendas_mes.value}")
        print(f"   - Lucro m√™s: {dashboard.lucro_mes.value}")
        print(f"   - Vendas dia: {dashboard.vendas_dia.value}")
        
        print("\n5. Testando m√©todo atualizar_valores...")
        dashboard.atualizar_valores()
        print("   ‚úÖ M√©todo atualizar_valores executado")
        
        print("\n6. Verificando valores ap√≥s atualiza√ß√£o...")
        print(f"   - Vendas m√™s: {dashboard.vendas_mes.value}")
        print(f"   - Lucro m√™s: {dashboard.lucro_mes.value}")
        print(f"   - Vendas dia: {dashboard.vendas_dia.value}")
        
        print("\n7. Testando m√©todo build...")
        try:
            build_result = dashboard.build()
            print("   ‚úÖ M√©todo build executado com sucesso")
        except Exception as e:
            print(f"   ‚ùå Erro no m√©todo build: {e}")
        
        print("\nüéâ Verifica√ß√£o conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("=== VERIFICA√á√ÉO DE PROBLEMAS UI DO DASHBOARD ===\n")
    if verificar_problemas_ui():
        print("\n‚úÖ Dashboard funcionando corretamente!")
        print("\nüìã Se os cards n√£o atualizam visualmente:")
        print("1. Verifique se o sistema est√° sendo executado corretamente")
        print("2. Tente fazer logout e login novamente")
        print("3. Verifique se h√° erros no console")
    else:
        print("\n‚ùå Problemas encontrados. Verifique os erros acima.")

if __name__ == "__main__":
    main()
